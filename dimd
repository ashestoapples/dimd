#!/usr/bin/env python

# The hash database is a pickled dict object, with the key corresponding to the filname
# and the value being the hash value

from PIL import Image
from sys import argv
from getpass import getuser
from time import asctime, strftime
import os, hashlib, pickle

#Global Variables
# paths
dir_dimd = "/home/" + getuser() + "/.dimd"
path_conf = dir_dimd + "/config"
path_db = dir_dimd + "/db"
path_log = dir_dimd + "/log" 

#load database file from /home/user/.dimd
# database file is a picklled dict
def dbLoad():
	try:
		return pickle.load(open(path_db, 'rb'))
	except FileNotFoundError:
		with open(path_db, "w") as db: pass
		return {}
	
#print the help document, exit script afterwords
def printHelp():
	print(""""
		dimd - "Duplicate" (visually similar) IMage Detector v0.01
	author: icey@protonmail.ch

	- A script that detects duplicate images, and can deleted them depending on size -
	Q: Why "visually similar"?
	A: In order to compare relative to size, images that are visually similar get confated with eachother

	Format:
	dimd --options

	Flags:
	-h or --help\tDisplay this message.
	--init\t\tCheck if .dimd dir exists, generates default config file if missing, moves dimd to the user's path. When using this flag you can specify where dimd will be moved when the script is running
	-w\t\tWarn before deleting files.
	--clear-db\tClear database of all existing entries
	--rm-db-dir\tClear database entries that are located in a certain directory

	The config file and database file is located in /home/$USER/.dimd

			""")
	exit()

#generate default config file
def generateConfig():
	print("No config file exists (first run?), generating default config file... ")
	with open(path_conf, "w") as conf:
		conf.write("""
! Default config file for dimd
! Comments are made with '!'
! Syntax:
!	! dirs to be searched by dimd
!	dirs
!	{
!		/my/path/to/imgs
!	}
!	! image formats accepted by dimd
!	formats
!	{
!		.jpg
!		.png
!	}
!	! ignored subdirecties of specified directories, will ignore sub dirs of ignored sub dirs
!	ignore
!	{
!		/my/path/to/imgs/sub
!	}
!	! write a log entry of which user used to program and when files were deleted
!	logDeletes
!	! prefer larger images (x-pixels * y-pixels), inverse is "small", default w/o specifying is large
!	large

dirs
{
}

formats
{
	.jpg
	.jpeg
	.png
	.bmp
}""")

	exit(0)

#initialization function
def runInit():
	os.mkdir(dir_dimd)
	generateConfig()
	printHelp()

#parse the config file
def parseConfigFile(path):
	#syntax for config file
	confSyntax = ["!", "dirs", "formats", "{", "}", "large", "small", "logDeletes", "ignore"]

	dir_search = []   #mode 1 for config parser
	imgFormats = []   #mode 2 for config parser
	ignoredSubDirs = [] #mode 3
	large = True
	warn = True
	logDels = False

	try:
		with open(path, "r") as conf:
			bracket = False # are we inside of a bracket?
			mode = 0        # the "mode" referres what item in the open brackets is (that made no sense)
			modes = [[], dir_search, imgFormats, ignoredSubDirs] # list of lists for each mode, with index 0 being not insid of brackets
			for line in conf.readlines():
				line = line.strip()
				if len(line) != 0:       # ignore blank lines
					line = line.lstrip() # ignore trailing whitespace
					if line.startswith("!"):   # notice comments
						pass
					elif line not in confSyntax and bracket == False: #test for valid syntax
						print("There is an error in the config file.. \n >> ", line, "\b << \n")
						exit(1)
					elif line == "{" and bracket == False: #turns on open bracket appending
						bracket = True
					elif line == "}" and bracket == True:  #turn off open bracket appending
						bracket = False
						mode = 0
					elif bracket == True and mode > 0: #adds open bracket element to proper list
						if mode == 3:
							if True not in [line.startswith(x) for x in dir_search]:
								print("There is an error in the config file.")
								print("Parent dir(s) for ", line, " in ignore{} do not exist")
								exit(1)
						modes[mode].append(line)
					elif line == "dirs": #switches mode to 1
						mode = 1
					elif line == "formats": #switches mode to 2
						mode = 2
					elif line == "ignore":
						mode = 3
					elif line == "small":
						large = False
					elif line == "logDeletes":
						logDels = True
					else:
						#report syntax error in config file
						print("There is an error in the config file.. \n >> ", line, " << \n")
						exit(1)
	except FileNotFoundError:
		generateConfig()
		
	# # ~ returns a list of attributes used by the scipt in making descitions ~ # #
	return [dir_search, imgFormats, large, warn, logDels, ignoredSubDirs]

#parse arguments
def parseArguments(attribs):
	args = ["-h", "--help", "-w", "--clear-db", "--rm-db-dir","--init" ,"-p" ,"--print" ,"dimd.py"]

	if "-h" in argv or "--help" in argv:
		printHelp()

	if len(argv) > 1:
		place = 1
		for arg in argv:
			if arg not in args and "/" not in arg:
				print("That's not how this is used! pass -h or --help for more info\n")
				exit(1)
			if arg == "-w": 
				attribs[3] = False
			elif arg == "--clear-db":
				pickle.dump({}, open(path_db, "wb"))
				exit()
			elif arg == "--rm-db-dir":
				argv[place]
				db = pickle.load(path_db)
				newDb = {}
				for filepath in db.keys():
					if not filepath.startswith(argv[place]):
						newDb[filepath] = db[filepath]
				pickle.dump(newDb, path_db)
			elif arg == "--init":
				runInit()
			elif arg == "-p" or arg == "--print":
				cdb = dbLoad()
				for k in cdb.keys():
					print(cdb[k], " :: ", k)
				exit(0)

			place += 1

	return attribs

def dbClean(all_fnames):
	#check if db entries coorespond to a file in directories
	cdb = dbLoad()
	cdb_keys = list(cdb.keys()) #list of cdb keys, so we can alter the dict during iteration
	for e in cdb_keys:
		if e not in all_fnames:
			# rewrite database excluding faulty entries
			print("Faulty database entry ", e, " removed.")
			del cdb[e]
	pickle.dump(cdb, open(path_db, "wb"))

#gather all img file names in specefied directories
def getNewFileNames(attribs):
							   # the db dict, now loaded into mem
	all_fnames = []			   # list of filesnames in all specified dirs
	all_newFiles = {}		   # dict of new files in specefied dirs not in db
							   # dict value is set to dempty

	#loop to put filenames in all_fnames
	for ds in attribs[0]:
		for root, dirs, files in os.walk(ds):

			for name in files:
				if True not in [os.path.join(root, name).startswith(i) for i in attribs[5]]:
					for form in attribs[1]:
						if name.endswith(form):
							all_fnames.append(os.path.join(root, name))

	dbClean(all_fnames)
	cdb = dbLoad()

	#check for new files in directories
	for f in all_fnames:
		if f not in cdb.keys():
			print("New file: ", f, " found.")
			all_newFiles[f] = ""

	print(len(all_newFiles), " new files found.")
	if len(all_newFiles) < 1:
		print("Exiting .. ")
		exit(0)

	#return dict with filenames as keys, but empty values
	return all_newFiles

# generate hases for all new images found
def hashImages(all_newFiles):
	print("Commcening hash operations on ", len(all_newFiles), "files.")
	if (len(all_newFiles) > 1000): print("This may take a while.. ")
	fp = 1

	# generate hashes for images
	for newFile in all_newFiles.keys():
		with Image.open(newFile) as i:
			# where  i = image loading into mem; w = image pixel data
			#dhash algorithm, for comparative hashing
			w = []
			i = i.convert('L').resize((9, 8), Image.ANTIALIAS)
			for x in range(8):
				for y in range(8):
					w.append(i.getpixel((x,y)) > i.getpixel((x+1,y)))

			w = [int(n) for n in w]

			w = hashlib.md5(str(w).encode('utf-8')).hexdigest()

			all_newFiles[newFile] = str(w)
			print("[ ", fp, " / ", len(list(all_newFiles.keys())), " ] ", newFile)
			fp += 1

	print("Hashing complete\n")

	# returns a dict of filenames (keys) and their hases (values)
	return all_newFiles

# update database with new hashes
def dbUpdate(all_newFiles, attribs):
	cdb = dbLoad()
	empty = False
	if len(list(cdb.keys())) < 1: empty = True
	toBeDeleted = []				 # arrays of filenames that will by deleted by program
	anf_keys = all_newFiles.keys()	 # array of keys, so we can alter the dict during iteration

	for keyANF in anf_keys:
		cdb_keys = list(cdb.keys())  # grab updated keys form current database 
		if len(cdb_keys) < 1:		 # if cdb's empty, just pop the first on in
			cdb[keyANF] = all_newFiles[keyANF]
		else:
			# compare new potential entry to other in database
			for keyCDB in cdb_keys:
				if all_newFiles[keyANF] == cdb[keyCDB]:
					# if the hashes are identical, compare the sizes
					sizeANF = sizeCDB = 0
					with Image.open(keyANF, "r") as i:
						sizeANF = i.size[0] * i.size[1]
					with Image.open(keyCDB, "r") as i:
						sizeCDB = i.size[0] * i.size[1]

					if sizeANF == sizeCDB:
						# promt the user to select on to delete if the sizes are the same
						index = -1
						print("\nFiles:\n -->\t", keyANF, "\n -->\t", keyCDB, "\n..are identical and are the same size (", sizeANF, "px).")
						while index not in [0, 1]:
							print("\nPlease select ( 0 / 1 ) which file to delete")
							print(" [0] - ", keyANF)
							print(" [1] - ", keyCDB)
							try:
								index = int(str(input(" >> ")).strip())
							except ValueError:
								index = -1
						if index == 0:
							toBeDeleted.append(keyANF)
							break
						elif index == 1:
							del cdb[keyCDB]
							toBeDeleted.append(keyCDB)
							break
						else:
							print("Something went wrong .. ")
							exit(1)
					# delete according to size preferences
					elif sizeANF < sizeCDB:
						if attribs[2]:
							toBeDeleted.append(keyANF)
						else:
							del cdb[keyCDB]
							toBeDeleted.append(keyCDB)
							cdb[keyANF] = all_newFiles[keyANF]
					elif sizeANF > sizeCDB:
						if attribs[2]:
							del cdb[keyCDB]
							toBeDeleted.append(keyCDB)
							cdb[keyANF] = all_newFiles[keyANF]
						else:
							toBeDeleted.append(keyANF)
					else:
						print("wtf just happend")
						exit(1)
			# if no identical keys were found, add to db
			if keyANF not in toBeDeleted: 
				cdb[keyANF] = all_newFiles[keyANF]
				print("[", keyANF, "] added to database.")

	# update database file
	pickle.dump(cdb, open(path_db, "wb"))
	print("\nUpdated database dumped to file: ", path_db, "\n")

	# return a list of files marked for deletion
	return toBeDeleted

def purgeDuplicates(toBeDeleted, attribs):
	if attribs[4]:
		try:
			with open(path_log, 'a') as fp:
				fp.write("\n\t\t~ Ran by user: " + getuser() + " on " + strftime("%D") + " ~ \n\n")
		except FileNotFoundError:
			with open(path_log, 'w') as fp:
				fp.write("\n\t\t~ Ran by user: " + getuser() + " on " + strftime("%D") + " ~ \n\n")

	for fileName in toBeDeleted:
		if not attribs[3]:
			print("\nWARNING:\nFile: ", fileName, " will be permaninlty deleted, are you sure youwant to do this (Y/N)? ")
			if str(input(">>> ")).upper() == 'Y':
				os.remove(fileName)
				print(fileName, " -- Deleted\n")
			else:
				print("Attention: ", fileName, " will still exist in the system and is NOT in the database. It will be detected next time you run dimd on its directory.\n")
		else:
			os.remove(fileName)
			print(fileName, " -- Deleted\n")

		if attribs[4]:
			with open(path_log, "a") as fp:
				fp.write(fileName + " -- deleted on " + asctime() + "\n")


if __name__ == '__main__':
	attribs = parseArguments(parseConfigFile(path_conf))

	newHashes = hashImages(getNewFileNames(attribs))

	deleteList = dbUpdate(newHashes, attribs)

	purgeDuplicates(deleteList, attribs)
